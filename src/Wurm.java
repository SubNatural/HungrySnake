/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Wurm.java
 */
/**
 *
 * @author Janes.AbouChleih
 */


import java.awt.Graphics;
import java.util.Vector;
import javax.swing.JOptionPane;

public class Wurm {

    public Vector<WurmParts> wormpart; // der Vektor wormpart wird angelegt bezieht Daten aus Klasse WurmParts
    private boolean fressen; //Läuft das Spiel nicht

    public Wurm() {
        wormpart = new Vector();
        fressen = false; // Ja es läuft
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    void initialisiereWurm() {


        wormpart.clear();
        wormpart.add(new Kopf(0, 3));
        wormpart.add(new WurmParts(0, 2));
        wormpart.add(new WurmParts(0, 1));
        wormpart.add(new WurmParts(0, 0));

        ((WurmParts) wormpart.get(0)).setNext((WurmParts) wormpart.get(1));
        ((WurmParts) wormpart.get(1)).setNext((WurmParts) wormpart.get(2));
        ((WurmParts) wormpart.get(2)).setNext((WurmParts) wormpart.get(3));
        ((WurmParts) wormpart.get(0)).Richtung(3);
        ((WurmParts) wormpart.get(1)).Richtung(3);
        ((WurmParts) wormpart.get(2)).Richtung(3);
        ((WurmParts) wormpart.get(3)).Richtung(3);

    }// </editor-fold>

    public void zeichne(Graphics g, int feldBreite, int feldHoehe) {
        for (int i = 0; i < wormpart.size(); ++i) {
            ((WurmParts) wormpart.get(i)).zeichne(g, feldBreite, feldHoehe); // Zeichnet die Wurmzellen
        }
    }

    public boolean krieche() {
        boolean ruck = false; // Rückgabewert ob der Wurm noch kriecht
        if (fressen) {
            WurmParts part = new WurmParts(((WurmParts) wormpart.lastElement()).X(), ((WurmParts) wormpart.lastElement()).Y());
            // Wenn das Spiel läuft löscht Java die erste Zelle und setzt hinten eine hin
            part.Richtung(((WurmParts) wormpart.lastElement()).Richtung());
            // Die Richtung wird hier berücksichtigt
            ruck = ((WurmParts) wormpart.get(0)).krieche();
            //Rückgabewert ob der Wurm kriecht
            ((WurmParts) wormpart.lastElement()).setNext(part);
            wormpart.add(part);//Part wird hinten hinzugefügt

            fressen = false; // Wurm ist nicht mit Futterzelle zusammengestoßen
        } else {
            ruck = ((WurmParts) wormpart.get(0)).krieche(); //Rückgabewert ob der Wurm kriecht
        }
        return ruck;
    }

    public void direction(int richtung) { // Die Richtung wird angegeben
        ((WurmParts) wormpart.get(0)).Richtung(richtung); // Richtung wird im Vector angegeben
    }

    public boolean sameasworm(int x, int y) { // Prüfung ob der Wurm mit sich selbst zusammengestoßen ist.
        for (int i = 0; i < wormpart.size(); ++i) { // Je nach Größe wird jeder part abgefragt
            if ((((WurmParts) wormpart.get(i)).X() == x) && (((WurmParts) wormpart.get(i)).Y() == y)) {
                return true; // Er ist zusammengestoßen
            }
        }

        return false; // Nein er ist nicht zusammengestoßen
    }
    private int length = 0; // Zaehler für die Laenge wird angelegt.

    public void wachse() {
        fressen = true; // Hat der Wurm gerade eine Futterzelle getroffen

        if (fressen) { // siehe oben
            length++; // Laenge wird um 1 erhöht
            if (length == 20) { 
                Object[] options = {"Beenden"}; // Popup Option ist beenden
                JOptionPane.showOptionDialog(null, "Sie haben gewonnen", "Sieg",//Message mit Titel "Sieg"
                        //Text "Sie haben gewonnen
                        JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, options, options[0]);
                System.exit(0); // Spiel wird beendet
            }
        }
    }
}
