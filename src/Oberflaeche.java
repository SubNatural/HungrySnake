/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Oberflaeche.java
 */
/**
 *
 * @author Janes.AbouChleih
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class Oberflaeche extends JPanel {

    private Steuerung s; //Steuerungsobj. s wird angelegt
    private int lengthY; // GZ lengthY wird als private angelegt Zugriff hier
    private int lengthX; // GZ lengthY´X wird als private angelegt Zugriff hier

    public Oberflaeche() { //siehe Methodenrumpf initComponent();
        initComponents(); //Spiel wird erstellt
    }

    public void aktualisiereOberflaeche() { // siehe Methodenrumpf repaint();
        repaint(); // Spiel wird nach jedem Takt t neugezeichnet
    }

    @Override
    public void paintComponent(Graphics g) { // In dieser Methode wird das Spielfeld
        // also das Gitternetz gezeichnet
        int laengeX = getWidth() / 10;       // Die laengeX ist die Breite eines Kästchens 40x40
        int laengeY = getHeight() / 10;      // Die laengeY ist die Höhe eines Kästchens 40x40

        this.lengthX = laengeX;             // Für den Return Wert wird die Variable benötigt
        this.lengthY = laengeY;             // Für den Return Wert wird die Variable benötigt

        g.setColor(Color.LIGHT_GRAY);       // Der Hintergrund trägt die Farbe hellgrau
        g.fillRect(0, 0, getWidth(), getHeight()); //Der Hintergrund ist so wie das Feld
        // Wird also von 0*0 bis 400(getWidth())*400(getHeight())
        // gezeichnet
        s.zeichne(g);

        g.setColor(Color.black);  // Die Farbe des Gitters ist schwarz
        for (int i = 0; i < 11; ++i) {// 10 Striche für das Gitter
            // also wird bis 10(11mal gezählt) gezählt
            g.drawLine(i * laengeX, 0, i * laengeX, 10 * laengeY); // Die senkrechten Striche
            // des Gitters werden gezeichnet
            g.drawLine(0, i * laengeY, 10 * laengeX, i * laengeY); // Die waagerechten Striche
            // des Gitters werden gezeichnet
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                Oberflaeche.this.formKeyPressed(evt);
            }
        });
        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 400, 32767));

        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 300, 32767));
    }

    private void formKeyPressed(KeyEvent evt) {
        this.s.verarbeiteTastenDruck(evt.getKeyCode());
    }// </editor-fold>//GEN-END:initComponents

    public void Verloren() { // Diese Methode wird bei Berührung der Wand
        // oder Berührung des Wurm mit sich selbst aufgerufen
        Object[] options = {"Beenden", "Neustart"}; //Optionen zum Klicken beim PopUp
        int choosenvalue = JOptionPane.showOptionDialog(null, "Sie haben verloren!", "Verloren", //PopUp mit Titel "Verloren"
                // und Text "Sie haben verloren"
                JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, // 2 Optionen und der Typ ist eine Warnung
                null, options, "Neustart"); // Beenden und Neustart als Option
        if (choosenvalue != 0) { // Wenn choosenvalue nicht 0 ist, dann wird neugestartet
            Frame.jf.setVisible(false); //Schließt die letzte Instanz des Spiels 
            Frame.main(null);        //Erstellt eine neue Instanz
            //Neustart des Games
        }
        if (choosenvalue == 0) { // Wenn choosenvalue 0(Default Option) ist, dann beendet das Spiel
            System.exit(0); // Spiel wird beendet
        }
    }

    // System.exit(0); // Was passiert wenn man beenden drückt --> Schließen
    public int heightfield() {
        return lengthY; // Return des lengthY für andere Methoden in andren Klassen
    }

    public int widthfield() {
        return lengthX; // Return des lengthX für andere Methoden in anderen Klassen
    }

    public void Steuer(Steuerung steuerung) {
        s = steuerung; //Objekt Steuerung s
    }
}
